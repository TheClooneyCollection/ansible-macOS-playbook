---
- hosts: all

  vars:
    # For all homebrew related tasks,
    # remember to add the `become` and `become_user` properties.
    # So that this playbook can be used on a multiple users system.

    homebrew_user: "{{ ansible_user_id }}"
    homebrew_group: admin

    generate_ssh: false
    ssh_type: ed25519
    ssh_rounds: 256
    ssh_private_key_path: "~/.ssh/id_{{ ssh_type }}"
    ssh_keygen_command: "ssh-keygen -o -t {{ ssh_type }} -a {{ ssh_rounds }} -N '{{ passphrase.user_input }}' -f {{ ssh_private_key_path }}"

  pre_tasks:
    - name: Let me check your password first
      command: echo "Password test in progress..."
      timeout: 1
      become: true
      changed_when: false

    - debug:
        msg: Hello, World!

  roles:
    - dotfiles
    - ssh
    - homebrew-setup
    # - spacemacs
    - vim
    - packages
    - python-env
    - fishshell
    - fzf
    - folder-structure
    - finder
    - stage-manager
    - dock
    - shared_fonts

    # - name: Set up Python development environment
    #   tags: python
    #   block:

    #   - name: Ensure Ansible is installed with Homebrew's pip
    #     pip:
    #       name: ansible
    #     vars:
    #       extra_path: "{{ brew_prefix.stdout }}/bin"
    #     tags:
    #       - ansible

    #   # It's much easier to install poetry with Homebrew
    #   # Than using the installer...
    #   # For some reason it really like the `~/Library/Python/3.9/bin` path...
    #   - name: Install poetry
    #     homebrew:
    #       name: poetry
    #     become: true
    #     become_user: "{{ homebrew_user }}"
    #     tags: poetry

    #   - name: Set Up The Root Virtual Environment
    #     command:
    #       cmd: poetry install --no-root
    #       chdir: ~/
    #       creates: ~/poetry.lock
    #     tags: poetry

    # # Set up fishshell as the default shell #

    # - name: Set up fishshell as the default shell
    #   tags: fishshell
    #   block:

    #   - name: Get fishshell's path
    #     command: which fish
    #     register: fish
    #     changed_when: false

    #   - name: Ensure fishshell is included in /etc/shells
    #     lineinfile:
    #       path: /etc/shells
    #       line: "{{ fish.stdout }}"
    #     become: true

    #   - name: Ensure current user's default shell is fish
    #     user:
    #       name: "{{ ansible_user_id }}"
    #       shell: "{{ fish.stdout }}"
    #     become: true

    # - name: Configure fzf
    #   command:
    #     cmd: "{{ brew_prefix.stdout }}/opt/fzf/install"
    #     creates: ~/.fzf.bash
    #   tags: fzf

    # - name: Set up my folder structure
    #   file:
    #     path: "{{ item }}"
    #     state: directory
    #   loop:
    #     - ~/Source/Projects
    #     - ~/Source/Forks
    #     - ~/Source/Work
    #   tags: folder-structure

    # - name: Configure Finder
    #   tags: finder
    #   block:

    #   - name: Show path bar
    #     osx_defaults:
    #       domain: com.apple.finder
    #       key: ShowPathbar
    #       type: bool
    #       value: true
    #       state: present
    #     register: finder_path_bar

    #   - name: Show column view by default
    #     osx_defaults:
    #       domain: com.apple.finder
    #       key: FXPreferredViewStyle
    #       type: string
    #       value: clmv
    #       state: present
    #     register: finder_column_view

    #   - name: Keep folders on top
    #     osx_defaults:
    #       domain: com.apple.finder
    #       key: _FXSortFoldersFirst
    #       type: bool
    #       value: true
    #       state: present
    #     register: finder_folders_on_top

    #   - name: Search current folder by default
    #     osx_defaults:
    #       domain: com.apple.finder
    #       key: FXDefaultSearchScope
    #       type: string
    #       value: SCcf
    #       state: present
    #     register: finder_search_current_folder

    #   - name: Remove outdated (30 days) trash items
    #     osx_defaults:
    #       domain: com.apple.finder
    #       key: FXRemoveOldTrashItems
    #       type: bool
    #       value: true
    #       state: present
    #     register: finder_trash_old_trash

    # - name: Configure Stage Manager
    #   tags: stage-manager
    #   block:

    #   # Found a few settings here: https://forum.latenightsw.com/t/stage-manager-control-from-applescript/4303
    #   # `GloballyEnabled`: Enabled or not
    #   # `AppWindowGroupingBehavior`: Show windows from an application - All at once vs. One at a time
    #   # `HideDesktop`: Show items in Stage Manager

    #   - name: Enable Stage Manager
    #     osx_defaults:
    #       domain: com.apple.WindowManager
    #       key: GloballyEnabled
    #       type: bool
    #       value: true
    #       state: present

    #   - name: Show desktop items in Stage Manager
    #     osx_defaults:
    #       domain: com.apple.WindowManager
    #       key: HideDesktop
    #       type: bool
    #       value: false
    #       state: present

    # - name: Configure Dock & Mission Control
    #   tags: dock
    #   block:

    #   - name: On your right
    #     osx_defaults:
    #       domain: com.apple.dock
    #       key: orientation
    #       type: string
    #       value: right
    #       state: present
    #     register: dock_is_right

    #   - name: Duck!
    #     osx_defaults:
    #       domain: com.apple.dock
    #       key: autohide
    #       type: bool
    #       value: true
    #       state: present
    #     register: dock_duck

    #   - name: Don't you dare to bounce (Dock icons, I am talking to you)
    #     osx_defaults:
    #       domain: com.apple.dock
    #       key: no-bouncing
    #       type: bool
    #       value: true
    #       state: present
    #     register: dock_no_bounce

    #   - name: Only show me running apps in the Dock
    #     block:

    #     - name: Only show me running apps in the Dock
    #       osx_defaults:
    #         domain: com.apple.dock
    #         key: static-only
    #         type: bool
    #         value: true
    #         state: present
    #       register: dock_only_running_apps

    #     - name: No suggested and recent apps in the Dock please
    #       osx_defaults:
    #         domain: com.apple.dock
    #         key: show-recents
    #         type: bool
    #         value: false
    #         state: present
    #       register: dock_no_suggestion_no_recents

    #   - name: Don't rearrange my spaces please
    #     osx_defaults:
    #       domain: com.apple.dock
    #       key: mru-spaces
    #       type: bool
    #       value: false
    #       state: present
    #     register: mission_control_no_auto_rearrange

    #   - name: Kill it! Kill it now! (Dock)
    #     command: killall Dock
    #     when: dock_is_right.changed or dock_duck.changed or dock_no_bounce.changed or dock_only_running_apps.changed or dock_no_suggestion_no_recents.changed or mission_control_no_auto_rearrange.changed
